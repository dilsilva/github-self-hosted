name: Deploy to ECR

on: push
env:
  AWS_REGION: eu-west-1
  AWS_ACCOUNT: 061051224299
  ECR_REGISTRY: 061051224299.dkr.ecr.eu-west-1.amazonaws.com
  ECR_REPOSITORY: go-app

jobs:
  build:
    name: CI
    runs-on: self-hosted
    steps:

      # Checkout and test app code
    - name: Check out code
      uses: actions/checkout@v2
      with: 
        repository: 'dilsilva/go-load-generator'

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'
    - name: Install dependencies
      run: go get ./cmd/loadgen/
    # - name: Unit Test 
    #   run: go test -v -cover ./... 

      # Build and tag  
    - name: Build and tag image
      id: build-image
      env:
        TAG_COMMIT: ${{ github.sha }}
      run: |

        # Build the Docker image using the specified tags
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$TAG_COMMIT .
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$TAG_COMMIT" >> $GITHUB_OUTPUT

      # Scan Artefacts  
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ steps.build-image.outputs.image }}
        format: 'table'
        hide-progress: true
        # exit-code: '1' #Error in case of vulnerabilities
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH' #Ignore low severity vulnerabilities

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        # Get the ECR login password and use it to log in to the ECR registry
        result=$(aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com)

    - name: Push image to Amazon ECR
      id: push-image
      env:
        TAG_COMMIT: ${{ github.sha }}
      run: |

        # Push the Docker image to the ECR repository 
        echo "$ECR_REGISTRY/$ECR_REPOSITORY:$TAG_COMMIT"
        echo "${{ steps.build-image.outputs.image }}"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TAG_COMMIT

      #Insert Sign Image verification step before deployment
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition web --query taskDefinition > task-definition.json
        cat task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: my-container
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: cicdsvc
        cluster: cicdtest
        wait-for-service-stability: true
