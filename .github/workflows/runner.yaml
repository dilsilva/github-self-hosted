# name: do-the-job
# on: push
# jobs:
#   do-the-job:
#     name: Do the job on the runner
#     runs-on: self-hosted
#     steps:
#       - uses: actions/checkout@v2
#       - name: Hello World
#         run: |
#           echo 'Hello World!'
#           sleep 15
#           echo 'Goodbye!'
name: Deploy to ECR

on: push
env:
  ECR_REPOSITORY: go-app
  EKS_CLUSTER_NAME: Kubernetes-demo 
  AWS_REGION: eu-west-1
jobs:
  build:
    name: CI
    runs-on: self-hosted
    steps:
    - name: Set short git commit SHA
      id: commit
      uses: prompt/actions-commit-hash@v2

  # Checkout and test app code
    - name: Check out code
      uses: actions/checkout@v2
      with: 
        repository: 'dilsilva/go-load-generator'

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'
    - name: Install dependencies
      run: go get ./cmd/loadgen/
    - name: Unit Test 
      run: go test -v -cover ./...
      run: ls -la
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    #Insert vulnerability scan after build
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    # - name: Update kube config
    #   run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    # #Insert Sign Image verification step before deployment

    # - name: Deploy to EKS
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
    #     IMAGE_TAG: ${{ steps.commit.outputs.short }}
    #   run: |
    #     sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" manifests/hello-app-deployment.yaml && \
    #     kubectl apply -f manifests/hello-app-deployment.yaml
    #     kubectl apply -f manifests/hello-app-service.yaml
####
